include "general"

akka {
  remote {
    log-remote-lifecycle-events = off
    netty.tcp {
      hostname = "127.0.0.1"
      port = 2551
    }
  }

  cluster {
    seed-nodes = ["akka.tcp://ClusterSystem@127.0.0.1:2551"]
  }

  actor {
    provider = "akka.cluster.ClusterActorRefProvider"

    serialize-messages = off // verify that messages are serializable

    debug {
      receive = on // log all messages sent to an actor if that actors receive method is a LoggingReceive
      autoreceive = off // log all special messages like Kill, PoisoffPill etc sent to all actors
      lifecycle = on // log all actor lifecycle events of all actors
      fsm = off // enable logging of all events, transitioffs and timers of FSM Actors that extend LoggingFSM
      event-stream = on // enable logging of subscriptions (subscribe/unsubscribe) on the ActorSystem.eventStream
    }

    serializers {
      createPerson = "com.github.dnvriend.serializer.CreatePersonSerializer"
      changeFirstName = "com.github.dnvriend.serializer.ChangeFirstNameSerializer"
      changeLastName = "com.github.dnvriend.serializer.ChangeLastNameSerializer"

      personCreated = "com.github.dnvriend.serializer.PersonCreatedSerializer"
      firstNameChanged = "com.github.dnvriend.serializer.FirstNameChangedSerializer"
      lastNameChanged = "com.github.dnvriend.serializer.LastNameChangedSerializer"
    }

    serialization-bindings {
      "com.github.dnvriend.Person$CreatePerson" = createPerson
      "com.github.dnvriend.Person$ChangeFirstName" = changeFirstName
      "com.github.dnvriend.Person$ChangeLastName" = changeLastName

      "com.github.dnvriend.data.Command.PBCreatePerson" = createPerson
      "com.github.dnvriend.data.Event.PBPersonCreated" = personCreated
      "com.github.dnvriend.data.Event.PBFirstNameChanged" = firstNameChanged
      "com.github.dnvriend.data.Event.PBLastNameChanged" = lastNameChanged
    }
  }
}

jdbc-journal {
  tables {
    journal {
      tableName = "journal"
      schemaName = "akka_persistence_jdbc"
    }

    deletedTo {
      tableName = "deleted_to"
      schemaName = "akka_persistence_jdbc"
    }
  }

  slick = ${slick}

  // akka persistence can convert domain messages to messages specific for
  // the plugin, like eg. tagging an event
  event-adapters {
    tagging = "com.github.dnvriend.adapter.TaggingEventAdapter"
  }

  event-adapter-bindings {
    "com.github.dnvriend.data.Event.PBPersonCreated" = tagging
    "com.github.dnvriend.data.Event.PBFirstNameChanged" = tagging
    "com.github.dnvriend.data.Event.PBLastNameChanged" = tagging
    "com.github.dnvriend.Person$PersonCreated" = tagging
    "com.github.dnvriend.Person$FirstNameChanged" = tagging
    "com.github.dnvriend.Person$LastNameChanged" = tagging
  }
}

# the akka-persistence-snapshot-store in use
jdbc-snapshot-store {
  tables {
    snapshot {
      tableName = "snapshot"
      schemaName = "akka_persistence_jdbc"
    }
  }

  slick = ${slick}
}

# the akka-persistence-query provider in use
jdbc-read-journal {
  # New events are retrieved (polled) with this interval.
  refresh-interval = "1s"

  # How many events to fetch in one query (replay) and keep buffered until they
  # are delivered downstreams.
  max-buffer-size = "500"

  tables {
    journal {
      tableName = "journal"
      schemaName = "akka_persistence_jdbc"
    }
  }

  slick = ${slick}
}

// readmodel for person
person-read-model {
  host = "boot2docker"
  port = "5432"
  name = "docker"

  url = "jdbc:postgresql://boot2docker:5432/docker"
  user = "docker"
  password = "docker"
  driver = "org.postgresql.Driver"
  keepAliveConnection = on
  numThreads = 2
  queueSize = 100
}